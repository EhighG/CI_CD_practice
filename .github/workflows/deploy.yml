name: Build and Deploy Spring Boot Project to AWS EC2

on:
  push:
    branches: [ master ]
env:
  PROJECT_NAME: CI_CD_practice-server
  BUCKET_NAME: ehigh-cicd-practice
  CODE_DEPLOY_APP_NAME: cicd-practice
  DEPLOYMENT_GROUP_NAME: production

jobs:
  build: # job 이름
    runs-on: ubuntu-latest # 이러면 우분투 인스턴스를 띄워주는거??
    steps: # 한 job은 여러개의 step들로 구성
      - name: Checkout
        uses: actions/checkout@v2 # import해서 쓸(혹은 호출할?) 등록된 workflow인듯.

      - name: Setup Java jdk 21
        uses: actions/setup-java@v1
        with: # uses에 지정한 workflow를 호출할때의 파라미터인가 싶다
          java-version: 21

      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          character set server: 'utf8'
          mysql database: 'rds'
          mysql user: ${{vars.USER}}
          mysql password: ${{secrets.PASSWORD}}

      - name: Grant -x permission of gradlew
        # 직접 작업내용(쉘 명령어)을 정의할 땐 이렇게
        run: |
          pwd
          chmod +x ./gradlew
        shell: bash # 쉘 종류도 명시

      - name: Make application.yml
        if: contains(github.ref, 'master') # branch가 master일 때
        run: | # 요 |는 뭘지?
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build -x test # -x : 뒤에 오는 작업을 생략하고 빌드
        shell: bash

      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: deploy using CodeDeploy # CodeDeploy에 배포 요청
        run: aws deploy create-deployment
          --application-name $CODE_DEPLOY_APP_NAME
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name $DEPLOYMENT_GROUP_NAME
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
